/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type VaultStruct = {
  shortOtoken: string;
  longOtoken: string;
  collateralAssets: string[];
  shortAmount: BigNumberish;
  longAmount: BigNumberish;
  usedLongAmount: BigNumberish;
  collateralAmounts: BigNumberish[];
  usedCollateralAmounts: BigNumberish[];
  reservedCollateralValues: BigNumberish[];
  unusedCollateralAmounts: BigNumberish[];
};

export type VaultStructOutput = [
  string,
  string,
  string[],
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber[],
  BigNumber[],
  BigNumber[],
  BigNumber[]
] & {
  shortOtoken: string;
  longOtoken: string;
  collateralAssets: string[];
  shortAmount: BigNumber;
  longAmount: BigNumber;
  usedLongAmount: BigNumber;
  collateralAmounts: BigNumber[];
  usedCollateralAmounts: BigNumber[];
  reservedCollateralValues: BigNumber[];
  unusedCollateralAmounts: BigNumber[];
};

export interface MarginVaultTesterInterface extends utils.Interface {
  functions: {
    "getVault(uint256)": FunctionFragment;
    "initCollaterals(uint256,address[])": FunctionFragment;
    "testAddCollaterals(uint256,address[],uint256[])": FunctionFragment;
    "testAddLong(uint256,address,uint256)": FunctionFragment;
    "testAddShort(uint256,address,uint256)": FunctionFragment;
    "testRemoveCollateral(uint256,address,uint256,uint256)": FunctionFragment;
    "testRemoveLong(uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initCollaterals",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "testAddCollaterals",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "testAddLong",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testAddShort",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveCollateral",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveLong",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initCollaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddCollaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddLong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddShort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveLong",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MarginVaultTester extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarginVaultTesterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getVault(
      _vaultIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[VaultStructOutput]>;

    initCollaterals(
      _vaultIndex: BigNumberish,
      _collateralAssets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testAddCollaterals(
      _vaultIndex: BigNumberish,
      _collateralAssets: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testAddLong(
      _vaultIndex: BigNumberish,
      _longOtoken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testAddShort(
      _vaultIndex: BigNumberish,
      _shortOtoken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testRemoveCollateral(
      _vaultIndex: BigNumberish,
      _collateralAsset: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testRemoveLong(
      _vaultIndex: BigNumberish,
      _longOtoken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getVault(
    _vaultIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<VaultStructOutput>;

  initCollaterals(
    _vaultIndex: BigNumberish,
    _collateralAssets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testAddCollaterals(
    _vaultIndex: BigNumberish,
    _collateralAssets: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testAddLong(
    _vaultIndex: BigNumberish,
    _longOtoken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testAddShort(
    _vaultIndex: BigNumberish,
    _shortOtoken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testRemoveCollateral(
    _vaultIndex: BigNumberish,
    _collateralAsset: string,
    _amount: BigNumberish,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testRemoveLong(
    _vaultIndex: BigNumberish,
    _longOtoken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getVault(
      _vaultIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<VaultStructOutput>;

    initCollaterals(
      _vaultIndex: BigNumberish,
      _collateralAssets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    testAddCollaterals(
      _vaultIndex: BigNumberish,
      _collateralAssets: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    testAddLong(
      _vaultIndex: BigNumberish,
      _longOtoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testAddShort(
      _vaultIndex: BigNumberish,
      _shortOtoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testRemoveCollateral(
      _vaultIndex: BigNumberish,
      _collateralAsset: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testRemoveLong(
      _vaultIndex: BigNumberish,
      _longOtoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getVault(
      _vaultIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initCollaterals(
      _vaultIndex: BigNumberish,
      _collateralAssets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testAddCollaterals(
      _vaultIndex: BigNumberish,
      _collateralAssets: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testAddLong(
      _vaultIndex: BigNumberish,
      _longOtoken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testAddShort(
      _vaultIndex: BigNumberish,
      _shortOtoken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testRemoveCollateral(
      _vaultIndex: BigNumberish,
      _collateralAsset: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testRemoveLong(
      _vaultIndex: BigNumberish,
      _longOtoken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getVault(
      _vaultIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initCollaterals(
      _vaultIndex: BigNumberish,
      _collateralAssets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testAddCollaterals(
      _vaultIndex: BigNumberish,
      _collateralAssets: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testAddLong(
      _vaultIndex: BigNumberish,
      _longOtoken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testAddShort(
      _vaultIndex: BigNumberish,
      _shortOtoken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testRemoveCollateral(
      _vaultIndex: BigNumberish,
      _collateralAsset: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testRemoveLong(
      _vaultIndex: BigNumberish,
      _longOtoken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
