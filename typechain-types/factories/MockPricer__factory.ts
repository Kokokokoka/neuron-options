/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockPricer, MockPricerInterface } from "../MockPricer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "address",
        name: "_oracle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "asset",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getHistoricalPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "contract OracleInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_expiryTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "setExpiryPriceInOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102e43803806102e483398101604081905261002f9161007c565b600280546001600160a01b039384166001600160a01b031991821617909155600080549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610226806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806338d52e0f146100675780635c5ebfaf146100975780637dc0d1d0146100ac57806391b7f5ed146100bf57806398d5fdca146100d2578063eec377c0146100e3575b600080fd5b60025461007a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100aa6100a5366004610182565b61010f565b005b60005461007a906001600160a01b031681565b6100aa6100cd3660046101a4565b600155565b60015460405190815260200161008e565b6100fa6100f13660046101bd565b50600154904290565b6040805192835260208301919091520161008e565b60005460025460405163ee53140960e01b81526001600160a01b039182166004820152602481018590526044810184905291169063ee53140990606401600060405180830381600087803b15801561016657600080fd5b505af115801561017a573d6000803e3d6000fd5b505050505050565b6000806040838503121561019557600080fd5b50508035926020909101359150565b6000602082840312156101b657600080fd5b5035919050565b6000602082840312156101cf57600080fd5b813569ffffffffffffffffffff811681146101e957600080fd5b939250505056fea26469706673582212208ff06c4f1ffe1c15830bf10cf6bb12fee2019b44551aa1f299ecbf7c21a6c80f64736f6c63430008090033";

type MockPricerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPricerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPricer__factory extends ContractFactory {
  constructor(...args: MockPricerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _asset: string,
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockPricer> {
    return super.deploy(
      _asset,
      _oracle,
      overrides || {}
    ) as Promise<MockPricer>;
  }
  getDeployTransaction(
    _asset: string,
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_asset, _oracle, overrides || {});
  }
  attach(address: string): MockPricer {
    return super.attach(address) as MockPricer;
  }
  connect(signer: Signer): MockPricer__factory {
    return super.connect(signer) as MockPricer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPricerInterface {
    return new utils.Interface(_abi) as MockPricerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPricer {
    return new Contract(address, _abi, signerOrProvider) as MockPricer;
  }
}
