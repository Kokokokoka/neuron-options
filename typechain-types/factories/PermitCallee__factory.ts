/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PermitCallee, PermitCalleeInterface } from "../PermitCallee";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "callFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102db806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639c23da5014610030575b600080fd5b61004361003e366004610155565b610045565b005b600080600080600080600080888060200190518101906100659190610219565b97509750975097509750975097509750876001600160a01b031663d505accf888888888888886040518863ffffffff1660e01b81526004016100e997969594939291906001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b600060405180830381600087803b15801561010357600080fd5b505af1158015610117573d6000803e3d6000fd5b5050505050505050505050505050565b6001600160a01b038116811461013c57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561016857600080fd5b823561017381610127565b9150602083013567ffffffffffffffff8082111561019057600080fd5b818501915085601f8301126101a457600080fd5b8135818111156101b6576101b661013f565b604051601f8201601f19908116603f011681019083821181831017156101de576101de61013f565b816040528281528860208487010111156101f757600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080600080600080600080610100898b03121561023657600080fd5b885161024181610127565b60208a015190985061025281610127565b60408a015190975061026381610127565b80965050606089015194506080890151935060a089015160ff8116811461028957600080fd5b60c08a015160e0909a0151989b979a509598949793969250505056fea26469706673582212202038051e9464b02012aa3610f961538a0605201aeebf1af103ec3378432e24ec64736f6c63430008090033";

type PermitCalleeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PermitCalleeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PermitCallee__factory extends ContractFactory {
  constructor(...args: PermitCalleeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PermitCallee> {
    return super.deploy(overrides || {}) as Promise<PermitCallee>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PermitCallee {
    return super.attach(address) as PermitCallee;
  }
  connect(signer: Signer): PermitCallee__factory {
    return super.connect(signer) as PermitCallee__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PermitCalleeInterface {
    return new utils.Interface(_abi) as PermitCalleeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PermitCallee {
    return new Contract(address, _abi, signerOrProvider) as PermitCallee;
  }
}
