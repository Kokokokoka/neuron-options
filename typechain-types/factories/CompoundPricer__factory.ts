/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CompoundPricer,
  CompoundPricerInterface,
} from "../CompoundPricer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_cToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_underlying",
        type: "address",
      },
      {
        internalType: "address",
        name: "_oracle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "cToken",
    outputs: [
      {
        internalType: "contract CTokenInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "contract OracleInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_expiryTimestamp",
        type: "uint256",
      },
    ],
    name: "setExpiryPriceInOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "contract ERC20Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109a53803806109a583398101604081905261002f916101d4565b6001600160a01b03831661009e5760405162461bcd60e51b815260206004820152602b60248201527f436f6d706f756e645072696365723a2063546f6b656e2061646472657373206360448201526a0616e206e6f7420626520360ac1b60648201526084015b60405180910390fd5b6001600160a01b03821661010c5760405162461bcd60e51b815260206004820152602f60248201527f436f6d706f756e645072696365723a20756e6465726c79696e6720616464726560448201526e073732063616e206e6f74206265203608c1b6064820152608401610095565b6001600160a01b0381166101765760405162461bcd60e51b815260206004820152602b60248201527f436f6d706f756e645072696365723a206f7261636c652061646472657373206360448201526a0616e206e6f7420626520360ac1b6064820152608401610095565b600180546001600160a01b039485166001600160a01b031991821617909155600280549385169382169390931790925560008054919093169116179055610217565b80516001600160a01b03811681146101cf57600080fd5b919050565b6000806000606084860312156101e957600080fd5b6101f2846101b8565b9250610200602085016101b8565b915061020e604085016101b8565b90509250925092565b61077f806102266000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806369e527da1461005c5780636f307dc31461008c5780637dc0d1d01461009f57806396367290146100b257806398d5fdca146100c7575b600080fd5b60015461006f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b60025461006f906001600160a01b031681565b60005461006f906001600160a01b031681565b6100c56100c0366004610559565b6100dd565b005b6100cf610251565b604051908152602001610083565b600080546002546040516301957f8160e01b81526001600160a01b039182166004820152602481018590529116906301957f8190604401604080518083038186803b15801561012b57600080fd5b505afa15801561013f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101639190610572565b509050600081116101d05760405162461bcd60e51b815260206004820152602c60248201527f436f6d706f756e645072696365723a20756e6465726c79696e6720707269636560448201526b081b9bdd081cd95d081e595d60a21b60648201526084015b60405180910390fd5b60006101db82610344565b60005460015460405163ee53140960e01b81526001600160a01b0391821660048201526024810187905260448101849052929350169063ee53140990606401600060405180830381600087803b15801561023457600080fd5b505af1158015610248573d6000803e3d6000fd5b50505050505050565b600080546002546040516341976e0960e01b81526001600160a01b039182166004820152839291909116906341976e099060240160206040518083038186803b15801561029d57600080fd5b505afa1580156102b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d591906105a7565b9050600081116103355760405162461bcd60e51b815260206004820152602560248201527f436f6d706f756e645072696365723a20756e6465726c79696e67207072696365604482015264020697320360dc1b60648201526084016101c7565b61033e81610344565b91505090565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561039557600080fd5b505afa1580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd91906105c0565b60ff1690506000600160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561042257600080fd5b505afa158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a91906105a7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156104ac57600080fd5b505afa1580156104c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e491906105a7565b90506105236104f484601261052c565b6104ff90600a6106e4565b61051d61050d85600a6106e4565b610517858a610541565b90610541565b9061054d565b95945050505050565b600061053882846106f0565b90505b92915050565b60006105388284610708565b60006105388284610727565b60006020828403121561056b57600080fd5b5035919050565b6000806040838503121561058557600080fd5b825191506020830151801515811461059c57600080fd5b809150509250929050565b6000602082840312156105b957600080fd5b5051919050565b6000602082840312156105d257600080fd5b815160ff811681146105e357600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561063b578160001904821115610621576106216105ea565b8085161561062e57918102915b93841c9390800290610605565b509250929050565b6000826106525750600161053b565b8161065f5750600061053b565b8160018114610675576002811461067f5761069b565b600191505061053b565b60ff841115610690576106906105ea565b50506001821b61053b565b5060208310610133831016604e8410600b84101617156106be575081810a61053b565b6106c88383610600565b80600019048211156106dc576106dc6105ea565b029392505050565b60006105388383610643565b60008219821115610703576107036105ea565b500190565b6000816000190483118215151615610722576107226105ea565b500290565b60008261074457634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220f12317821015e17a812fd7ac3f5f1fdc6bdeca0989ca2dfebc874a036fa96ac864736f6c63430008090033";

type CompoundPricerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CompoundPricerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CompoundPricer__factory extends ContractFactory {
  constructor(...args: CompoundPricerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _cToken: string,
    _underlying: string,
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CompoundPricer> {
    return super.deploy(
      _cToken,
      _underlying,
      _oracle,
      overrides || {}
    ) as Promise<CompoundPricer>;
  }
  getDeployTransaction(
    _cToken: string,
    _underlying: string,
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _cToken,
      _underlying,
      _oracle,
      overrides || {}
    );
  }
  attach(address: string): CompoundPricer {
    return super.attach(address) as CompoundPricer;
  }
  connect(signer: Signer): CompoundPricer__factory {
    return super.connect(signer) as CompoundPricer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CompoundPricerInterface {
    return new utils.Interface(_abi) as CompoundPricerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CompoundPricer {
    return new Contract(address, _abi, signerOrProvider) as CompoundPricer;
  }
}
