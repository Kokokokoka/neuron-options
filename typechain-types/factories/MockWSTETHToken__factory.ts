/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockWSTETHToken,
  MockWSTETHTokenInterface,
} from "../MockWSTETHToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stEthPerToken",
        type: "uint256",
      },
    ],
    name: "setStEthPerToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stEthPerToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e1b38038062000e1b8339810160408190526200003491620002c9565b62000040828262000055565b606a805460ff19166012179055505062000370565b600054610100900460ff16806200006b5750303b155b806200007a575060005460ff16155b620000e25760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201526d195b881a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff1615801562000105576000805461ffff19166101011790555b82516200011a90606890602086019062000156565b5081516200013090606990602085019062000156565b50606a805460ff19166012179055801562000151576000805461ff00191690555b505050565b828054620001649062000333565b90600052602060002090601f016020900481019282620001885760008555620001d3565b82601f10620001a357805160ff1916838001178555620001d3565b82800160010185558215620001d3579182015b82811115620001d3578251825591602001919060010190620001b6565b50620001e1929150620001e5565b5090565b5b80821115620001e15760008155600101620001e6565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200022457600080fd5b81516001600160401b0380821115620002415762000241620001fc565b604051601f8301601f19908116603f011681019082821181831017156200026c576200026c620001fc565b816040528381526020925086838588010111156200028957600080fd5b600091505b83821015620002ad57858201830151818301840152908201906200028e565b83821115620002bf5760008385830101525b9695505050505050565b60008060408385031215620002dd57600080fd5b82516001600160401b0380821115620002f557600080fd5b620003038683870162000212565b935060208501519150808211156200031a57600080fd5b50620003298582860162000212565b9150509250929050565b600181811c908216806200034857607f821691505b602082108114156200036a57634e487b7160e01b600052602260045260246000fd5b50919050565b610a9b80620003806000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806340c10f191161008c578063a457c2d711610066578063a457c2d7146101cc578063a9059cbb146101df578063b423a761146101f2578063dd62ed3e1461020557600080fd5b806340c10f191461018657806370a082311461019b57806395d89b41146101c457600080fd5b806318160ddd116100c857806318160ddd1461014357806323b872dd1461014b578063313ce5671461015e578063395093511461017357600080fd5b8063035faf82146100ef57806306fdde031461010b578063095ea7b314610120575b600080fd5b6100f860975481565b6040519081526020015b60405180910390f35b61011361023e565b6040516101029190610834565b61013361012e3660046108a5565b6102d0565b6040519015158152602001610102565b6067546100f8565b6101336101593660046108cf565b6102e6565b606a5460405160ff9091168152602001610102565b6101336101813660046108a5565b61034f565b6101996101943660046108a5565b610385565b005b6100f86101a936600461090b565b6001600160a01b031660009081526065602052604090205490565b610113610393565b6101336101da3660046108a5565b6103a2565b6101336101ed3660046108a5565b6103f1565b610199610200366004610926565b609755565b6100f861021336600461093f565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b60606068805461024d90610972565b80601f016020809104026020016040519081016040528092919081815260200182805461027990610972565b80156102c65780601f1061029b576101008083540402835291602001916102c6565b820191906000526020600020905b8154815290600101906020018083116102a957829003601f168201915b5050505050905090565b60006102dd3384846103fe565b50600192915050565b60006102f3848484610528565b610345843361034085604051806060016040528060288152602001610a19602891396001600160a01b038a16600090815260666020908152604080832033845290915290205491906106ae565b6103fe565b5060019392505050565b3360008181526066602090815260408083206001600160a01b038716845290915281205490916102dd91859061034090866106e8565b61038f828261074e565b5050565b60606069805461024d90610972565b60006102dd338461034085604051806060016040528060258152602001610a41602591393360009081526066602090815260408083206001600160a01b038d16845290915290205491906106ae565b60006102dd338484610528565b6001600160a01b0383166104655760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084015b60405180910390fd5b6001600160a01b0382166104c65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161045c565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831661058c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161045c565b6001600160a01b0382166105ee5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161045c565b61062b816040518060600160405280602681526020016109f3602691396001600160a01b03861660009081526065602052604090205491906106ae565b6001600160a01b03808516600090815260656020526040808220939093559084168152205461065a90826106e8565b6001600160a01b0380841660008181526065602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061051b9085815260200190565b600081848411156106d25760405162461bcd60e51b815260040161045c9190610834565b5060006106df84866109c3565b95945050505050565b6000806106f583856109da565b9050838110156107475760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161045c565b9392505050565b6001600160a01b0382166107a45760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161045c565b6067546107b190826106e8565b6067556001600160a01b0382166000908152606560205260409020546107d790826106e8565b6001600160a01b0383166000818152606560205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906108289085815260200190565b60405180910390a35050565b600060208083528351808285015260005b8181101561086157858101830151858201604001528201610845565b81811115610873576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146108a057600080fd5b919050565b600080604083850312156108b857600080fd5b6108c183610889565b946020939093013593505050565b6000806000606084860312156108e457600080fd5b6108ed84610889565b92506108fb60208501610889565b9150604084013590509250925092565b60006020828403121561091d57600080fd5b61074782610889565b60006020828403121561093857600080fd5b5035919050565b6000806040838503121561095257600080fd5b61095b83610889565b915061096960208401610889565b90509250929050565b600181811c9082168061098657607f821691505b602082108114156109a757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156109d5576109d56109ad565b500390565b600082198211156109ed576109ed6109ad565b50019056fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220fd42ddd647fd31499e1e1c146bcc9d42a4bed35597d835f5abe580d42f0a6a4c64736f6c63430008090033";

type MockWSTETHTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockWSTETHTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockWSTETHToken__factory extends ContractFactory {
  constructor(...args: MockWSTETHTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockWSTETHToken> {
    return super.deploy(
      _name,
      _symbol,
      overrides || {}
    ) as Promise<MockWSTETHToken>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, overrides || {});
  }
  attach(address: string): MockWSTETHToken {
    return super.attach(address) as MockWSTETHToken;
  }
  connect(signer: Signer): MockWSTETHToken__factory {
    return super.connect(signer) as MockWSTETHToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockWSTETHTokenInterface {
    return new utils.Interface(_abi) as MockWSTETHTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockWSTETHToken {
    return new Contract(address, _abi, signerOrProvider) as MockWSTETHToken;
  }
}
