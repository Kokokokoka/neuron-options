/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockCUSDC, MockCUSDCInterface } from "../MockCUSDC";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "address",
        name: "_underlying",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_initExchangeRateStored",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "exchangeRateStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "redeem",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "scale",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_exchangeRateStored",
        type: "uint256",
      },
    ],
    name: "setExchangeRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052670de0b6b3a76400006099553480156200001d57600080fd5b506040516200123f3803806200123f8339810160408190526200004091620002fa565b6200004c848462000086565b606a805460ff19166008179055609880546001600160a01b0319166001600160a01b03939093169290921790915560975550620003ca9050565b600054610100900460ff16806200009c5750303b155b80620000ab575060005460ff16155b620001135760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201526d195b881a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff1615801562000136576000805461ffff19166101011790555b82516200014b90606890602086019062000187565b5081516200016190606990602085019062000187565b50606a805460ff19166012179055801562000182576000805461ff00191690555b505050565b82805462000195906200038d565b90600052602060002090601f016020900481019282620001b9576000855562000204565b82601f10620001d457805160ff191683800117855562000204565b8280016001018555821562000204579182015b8281111562000204578251825591602001919060010190620001e7565b506200021292915062000216565b5090565b5b8082111562000212576000815560010162000217565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200025557600080fd5b81516001600160401b03808211156200027257620002726200022d565b604051601f8301601f19908116603f011681019082821181831017156200029d576200029d6200022d565b81604052838152602092508683858801011115620002ba57600080fd5b600091505b83821015620002de5785820183015181830184015290820190620002bf565b83821115620002f05760008385830101525b9695505050505050565b600080600080608085870312156200031157600080fd5b84516001600160401b03808211156200032957600080fd5b620003378883890162000243565b955060208701519150808211156200034e57600080fd5b506200035d8782880162000243565b604087015190945090506001600160a01b03811681146200037d57600080fd5b6060959095015193969295505050565b600181811c90821680620003a257607f821691505b60208210811415620003c457634e487b7160e01b600052602260045260246000fd5b50919050565b610e6580620003da6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a9059cbb11610071578063a9059cbb14610229578063db006a751461023c578063db068e0e1461024f578063dd62ed3e14610264578063f51e181a1461029d57600080fd5b806370a08231146101d257806395d89b41146101fb578063a0712d6814610203578063a457c2d71461021657600080fd5b806323b872dd116100de57806323b872dd1461016c578063313ce5671461017f57806339509351146101945780636f307dc3146101a757600080fd5b806306fdde0314610110578063095ea7b31461012e57806318160ddd14610151578063182df0f514610163575b600080fd5b6101186102a6565b6040516101259190610b79565b60405180910390f35b61014161013c366004610bea565b610338565b6040519015158152602001610125565b6067545b604051908152602001610125565b61015560975481565b61014161017a366004610c14565b61034e565b606a5460405160ff9091168152602001610125565b6101416101a2366004610bea565b6103b7565b6098546101ba906001600160a01b031681565b6040516001600160a01b039091168152602001610125565b6101556101e0366004610c50565b6001600160a01b031660009081526065602052604090205490565b6101186103ed565b610155610211366004610c6b565b6103fc565b610141610224366004610bea565b6104ce565b610141610237366004610bea565b61051d565b61015561024a366004610c6b565b61052a565b61026261025d366004610c6b565b609755565b005b610155610272366004610c84565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b61015560995481565b6060606880546102b590610cb7565b80601f01602080910402602001604051908101604052809291908181526020018280546102e190610cb7565b801561032e5780601f106103035761010080835404028352916020019161032e565b820191906000526020600020905b81548152906001019060200180831161031157829003601f168201915b5050505050905090565b60006103453384846105e5565b50600192915050565b600061035b84848461070f565b6103ad84336103a885604051806060016040528060288152602001610de3602891396001600160a01b038a1660009081526066602090815260408083203384529091529020549190610895565b6105e5565b5060019392505050565b3360008181526066602090815260408083206001600160a01b038716845290915281205490916103459185906103a890866108cf565b6060606980546102b590610cb7565b6000806104148360995461093590919063ffffffff16565b9050600061042d6097548361094190919063ffffffff16565b9050610439338261094d565b6098546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561048b57600080fd5b505af115801561049f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c39190610cf2565b506000949350505050565b600061034533846103a885604051806060016040528060258152602001610e0b602591393360009081526066602090815260408083206001600160a01b038d1684529091529020549190610895565b600061034533848461070f565b60006105363383610a33565b60006105596099546105536097548661093590919063ffffffff16565b90610941565b60985460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb90604401602060405180830381600087803b1580156105a657600080fd5b505af11580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de9190610cf2565b5092915050565b6001600160a01b03831661064c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084015b60405180910390fd5b6001600160a01b0382166106ad5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610643565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166107735760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610643565b6001600160a01b0382166107d55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610643565b61081281604051806060016040528060268152602001610dbd602691396001600160a01b0386166000908152606560205260409020549190610895565b6001600160a01b03808516600090815260656020526040808220939093559084168152205461084190826108cf565b6001600160a01b0380841660008181526065602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107029085815260200190565b600081848411156108b95760405162461bcd60e51b81526004016106439190610b79565b5060006108c68486610d2a565b95945050505050565b6000806108dc8385610d41565b90508381101561092e5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610643565b9392505050565b600061092e8284610d59565b600061092e8284610d78565b6001600160a01b0382166109a35760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610643565b6067546109b090826108cf565b6067556001600160a01b0382166000908152606560205260409020546109d690826108cf565b6001600160a01b0383166000818152606560205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a279085815260200190565b60405180910390a35050565b6001600160a01b038216610a935760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610643565b610ad081604051806060016040528060228152602001610d9b602291396001600160a01b0385166000908152606560205260409020549190610895565b6001600160a01b038316600090815260656020526040902055606754610af69082610b37565b6067556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610a27565b600061092e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610895565b600060208083528351808285015260005b81811015610ba657858101830151858201604001528201610b8a565b81811115610bb8576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610be557600080fd5b919050565b60008060408385031215610bfd57600080fd5b610c0683610bce565b946020939093013593505050565b600080600060608486031215610c2957600080fd5b610c3284610bce565b9250610c4060208501610bce565b9150604084013590509250925092565b600060208284031215610c6257600080fd5b61092e82610bce565b600060208284031215610c7d57600080fd5b5035919050565b60008060408385031215610c9757600080fd5b610ca083610bce565b9150610cae60208401610bce565b90509250929050565b600181811c90821680610ccb57607f821691505b60208210811415610cec57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610d0457600080fd5b8151801515811461092e57600080fd5b634e487b7160e01b600052601160045260246000fd5b600082821015610d3c57610d3c610d14565b500390565b60008219821115610d5457610d54610d14565b500190565b6000816000190483118215151615610d7357610d73610d14565b500290565b600082610d9557634e487b7160e01b600052601260045260246000fd5b50049056fe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220c1bca2c5417993103d555b8786fb18a49d66d672404aae7d3c6c30432608700464736f6c63430008090033";

type MockCUSDCConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCUSDCConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCUSDC__factory extends ContractFactory {
  constructor(...args: MockCUSDCConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _name: string,
    _symbol: string,
    _underlying: string,
    _initExchangeRateStored: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockCUSDC> {
    return super.deploy(
      _name,
      _symbol,
      _underlying,
      _initExchangeRateStored,
      overrides || {}
    ) as Promise<MockCUSDC>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    _underlying: string,
    _initExchangeRateStored: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _underlying,
      _initExchangeRateStored,
      overrides || {}
    );
  }
  attach(address: string): MockCUSDC {
    return super.attach(address) as MockCUSDC;
  }
  connect(signer: Signer): MockCUSDC__factory {
    return super.connect(signer) as MockCUSDC__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCUSDCInterface {
    return new utils.Interface(_abi) as MockCUSDCInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCUSDC {
    return new Contract(address, _abi, signerOrProvider) as MockCUSDC;
  }
}
