/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MarginVaultTester,
  MarginVaultTesterInterface,
} from "../MarginVaultTester";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vaultIndex",
        type: "uint256",
      },
    ],
    name: "getVault",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "shortOtoken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longOtoken",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "collateralAssets",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "shortAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "usedLongAmount",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "collateralAmounts",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "usedCollateralAmounts",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "reservedCollateralValues",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "unusedCollateralAmounts",
            type: "uint256[]",
          },
        ],
        internalType: "struct MarginVault.Vault",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vaultIndex",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "_collateralAssets",
        type: "address[]",
      },
    ],
    name: "initCollaterals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vaultIndex",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "_collateralAssets",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
    ],
    name: "testAddCollaterals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vaultIndex",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_longOtoken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "testAddLong",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vaultIndex",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_shortOtoken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "testAddShort",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vaultIndex",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_collateralAsset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "testRemoveCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vaultIndex",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_longOtoken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "testRemoveLong",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vaultIndex",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_shortOtoken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "_newCollateralRatio",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_newUsedLongAmount",
        type: "uint256",
      },
    ],
    name: "testRemoveShort",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610de6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636826e0dc1161005b5780636826e0dc146100db5780637cb26bd1146100ee5780639403b63414610101578063d4ff1cb61461012a57600080fd5b8063370794201461008d5780633ef3feaf146100a257806342cca35d146100b557806349f87f62146100c8575b600080fd5b6100a061009b366004610864565b61013d565b005b6100a06100b0366004610899565b6101d6565b6100a06100c3366004610864565b610276565b6100a06100d6366004610920565b6102de565b6100a06100e9366004610982565b61038f565b6100a06100fc366004610a05565b610454565b61011461010f366004610a7f565b6104e2565b6040516101219190610b0c565b60405180910390f35b6100a0610138366004610864565b610768565b3360009081526020818152604080832086845290915290819020905163bc59bba760e01b815260048101919091526001600160a01b03831660248201526044810182905273__$f483377b159a5ea0e3632e216689e4fd4e$__9063bc59bba7906064015b60006040518083038186803b1580156101b957600080fd5b505af41580156101cd573d6000803e3d6000fd5b50505050505050565b33600090815260208181526040808320878452909152908190209051630380bfdd60e61b815260048101919091526001600160a01b0384166024820152604481018390526064810182905273__$f483377b159a5ea0e3632e216689e4fd4e$__9063e02ff7409060840160006040518083038186803b15801561025857600080fd5b505af415801561026c573d6000803e3d6000fd5b5050505050505050565b3360009081526020818152604080832086845290915290819020905163032cb12d60e41b815260048101919091526001600160a01b03831660248201526044810182905273__$f483377b159a5ea0e3632e216689e4fd4e$__906332cb12d0906064016101a1565b336000908152602081815260408083208684529091529020600601541561030457600080fd5b33600090815260208181526040808320868452909152902061032a9060020183836107d0565b5060005b818110156103895733600090815260208181526040808320878452825282206006810180546001808201835591855283852001849055600990910180549182018155835290822001558061038181610bff565b91505061032e565b50505050565b33600090815260208181526040808320888452909152908190209051634795bf7160e01b815260048101919091526001600160a01b038516602482015260448101849052825160648201526084810182905273__$f483377b159a5ea0e3632e216689e4fd4e$__90634795bf719060a40160006040518083038186803b15801561041857600080fd5b505af415801561042c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101cd9190810190610cc3565b33600090815260208181526040808320888452909152908190209051633233079960e11b815273__$f483377b159a5ea0e3632e216689e4fd4e$__916364660f32916104ab91908890889088908890600401610d27565b60006040518083038186803b1580156104c357600080fd5b505af41580156104d7573d6000803e3d6000fd5b505050505050505050565b61054a60405180610140016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b3360009081526020818152604080832085845282529182902082516101408101845281546001600160a01b03908116825260018301541681840152600282018054855181860281018601875281815292959394938601938301828280156105da57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105bc575b505050505081526020016003820154815260200160048201548152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561065057602002820191906000526020600020905b81548152602001906001019080831161063c575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156106a857602002820191906000526020600020905b815481526020019060010190808311610694575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561070057602002820191906000526020600020905b8154815260200190600101908083116106ec575b505050505081526020016009820180548060200260200160405190810160405280929190818152602001828054801561075857602002820191906000526020600020905b815481526020019060010190808311610744575b5050505050815250509050919050565b336000908152602081815260408083208684529091529081902090516353f9de9f60e01b815260048101919091526001600160a01b03831660248201526044810182905273__$f483377b159a5ea0e3632e216689e4fd4e$__906353f9de9f906064016101a1565b828054828255906000526020600020908101928215610823579160200282015b828111156108235781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906107f0565b5061082f929150610833565b5090565b5b8082111561082f5760008155600101610834565b80356001600160a01b038116811461085f57600080fd5b919050565b60008060006060848603121561087957600080fd5b8335925061088960208501610848565b9150604084013590509250925092565b600080600080608085870312156108af57600080fd5b843593506108bf60208601610848565b93969395505050506040820135916060013590565b60008083601f8401126108e657600080fd5b50813567ffffffffffffffff8111156108fe57600080fd5b6020830191508360208260051b850101111561091957600080fd5b9250929050565b60008060006040848603121561093557600080fd5b83359250602084013567ffffffffffffffff81111561095357600080fd5b61095f868287016108d4565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b600080600080600085870360a081121561099b57600080fd5b863595506109ab60208801610848565b9450604087013593506020605f19820112156109c657600080fd5b506040516020810181811067ffffffffffffffff821117156109ea576109ea61096c565b60405260608701358152949793965091946080013592915050565b600080600080600060608688031215610a1d57600080fd5b85359450602086013567ffffffffffffffff80821115610a3c57600080fd5b610a4889838a016108d4565b90965094506040880135915080821115610a6157600080fd5b50610a6e888289016108d4565b969995985093965092949392505050565b600060208284031215610a9157600080fd5b5035919050565b600081518084526020808501945080840160005b83811015610ad15781516001600160a01b031687529582019590820190600101610aac565b509495945050505050565b600081518084526020808501945080840160005b83811015610ad157815187529582019590820190600101610af0565b60208152610b266020820183516001600160a01b03169052565b60006020830151610b4260408401826001600160a01b03169052565b506040830151610140806060850152610b5f610160850183610a98565b915060608501516080850152608085015160a085015260a085015160c085015260c0850151601f19808685030160e0870152610b9b8483610adc565b935060e08701519150610100818786030181880152610bba8584610adc565b945080880151925050610120818786030181880152610bd98584610adc565b908801518782039092018488015293509050610bf58382610adc565b9695505050505050565b6000600019821415610c2157634e487b7160e01b600052601160045260246000fd5b5060010190565b600082601f830112610c3957600080fd5b8151602067ffffffffffffffff80831115610c5657610c5661096c565b8260051b604051601f19603f83011681018181108482111715610c7b57610c7b61096c565b604052938452858101830193838101925087851115610c9957600080fd5b83870191505b84821015610cb857815183529183019190830190610c9f565b979650505050505050565b60008060408385031215610cd657600080fd5b825167ffffffffffffffff80821115610cee57600080fd5b610cfa86838701610c28565b93506020850151915080821115610d1057600080fd5b50610d1d85828601610c28565b9150509250929050565b85815260606020808301829052908201859052600090869060808401835b88811015610d71576001600160a01b03610d5e85610848565b1682529282019290820190600101610d45565b5084810360408601528581526001600160fb1b03861115610d9157600080fd5b8560051b9250828783830137600092010190815297965050505050505056fea264697066735822122033bb84e7e241b2f53148c7a5d3ed57768e690f1a3c5982d0e7cabe7aeef39f3164736f6c63430008090033";

type MarginVaultTesterConstructorParams =
  | [linkLibraryAddresses: MarginVaultTesterLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarginVaultTesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MarginVaultTester__factory extends ContractFactory {
  constructor(...args: MarginVaultTesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        MarginVaultTester__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: MarginVaultTesterLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$f483377b159a5ea0e3632e216689e4fd4e\\$__", "g"),
      linkLibraryAddresses["contracts/libs/MarginVault.sol:MarginVault"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MarginVaultTester> {
    return super.deploy(overrides || {}) as Promise<MarginVaultTester>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MarginVaultTester {
    return super.attach(address) as MarginVaultTester;
  }
  connect(signer: Signer): MarginVaultTester__factory {
    return super.connect(signer) as MarginVaultTester__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarginVaultTesterInterface {
    return new utils.Interface(_abi) as MarginVaultTesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MarginVaultTester {
    return new Contract(address, _abi, signerOrProvider) as MarginVaultTester;
  }
}

export interface MarginVaultTesterLibraryAddresses {
  ["contracts/libs/MarginVault.sol:MarginVault"]: string;
}
