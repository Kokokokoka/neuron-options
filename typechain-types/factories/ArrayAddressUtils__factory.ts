/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ArrayAddressUtils,
  ArrayAddressUtilsInterface,
} from "../ArrayAddressUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "self",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "arr",
        type: "address[]",
      },
    ],
    name: "isEqual",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x61026661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100345760003560e01c8062775c1a14610039575b600080fd5b61004c61004736600461018d565b610060565b604051901515815260200160405180910390f35b60008160405160200161007391906101f1565b604051602081830303815290604052805190602001208360405160200161009a91906101f1565b6040516020818303038152906040528051906020012014905092915050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146100e657600080fd5b919050565b600082601f8301126100fc57600080fd5b8135602067ffffffffffffffff80831115610119576101196100b9565b8260051b604051601f19603f8301168101818110848211171561013e5761013e6100b9565b60405293845285810183019383810192508785111561015c57600080fd5b83870191505b8482101561018257610173826100cf565b83529183019190830190610162565b979650505050505050565b600080604083850312156101a057600080fd5b823567ffffffffffffffff808211156101b857600080fd5b6101c4868387016100eb565b935060208501359150808211156101da57600080fd5b506101e7858286016100eb565b9150509250929050565b815160009082906020808601845b838110156102245781516001600160a01b0316855293820193908201906001016101ff565b5092969550505050505056fea26469706673582212205d22d25ada1022c71ebd9f8ea6f50372c4a71a068b063e1972e6248c435c032864736f6c63430008090033";

type ArrayAddressUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArrayAddressUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArrayAddressUtils__factory extends ContractFactory {
  constructor(...args: ArrayAddressUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ArrayAddressUtils> {
    return super.deploy(overrides || {}) as Promise<ArrayAddressUtils>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ArrayAddressUtils {
    return super.attach(address) as ArrayAddressUtils;
  }
  connect(signer: Signer): ArrayAddressUtils__factory {
    return super.connect(signer) as ArrayAddressUtils__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArrayAddressUtilsInterface {
    return new utils.Interface(_abi) as ArrayAddressUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArrayAddressUtils {
    return new Contract(address, _abi, signerOrProvider) as ArrayAddressUtils;
  }
}
