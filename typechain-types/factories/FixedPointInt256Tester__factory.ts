/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FixedPointInt256Tester,
  FixedPointInt256TesterInterface,
} from "../FixedPointInt256Tester";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "b",
        type: "tuple",
      },
    ],
    name: "testAdd",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "b",
        type: "tuple",
      },
    ],
    name: "testDiv",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
    ],
    name: "testFromUnscaledInt",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "b",
        type: "tuple",
      },
    ],
    name: "testIsEqual",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "b",
        type: "tuple",
      },
    ],
    name: "testIsGreaterThan",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "b",
        type: "tuple",
      },
    ],
    name: "testIsGreaterThanOrEqual",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "b",
        type: "tuple",
      },
    ],
    name: "testIsLessThan",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "b",
        type: "tuple",
      },
    ],
    name: "testIsLessThanOrEqual",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "b",
        type: "tuple",
      },
    ],
    name: "testMax",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "b",
        type: "tuple",
      },
    ],
    name: "testMin",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "b",
        type: "tuple",
      },
    ],
    name: "testMul",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "b",
        type: "tuple",
      },
    ],
    name: "testSub",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
        ],
        internalType: "struct FPI.FixedPointInt",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610663806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80639e66c670116100715780639e66c6701461014f578063aec27bb714610162578063c325f86614610175578063d493105314610188578063d6ff0a9f1461019b578063eab39de7146101ae57600080fd5b80631c604bd6146100b95780632284f80c146100e15780634a3b852514610103578063746398161461011657806385f547ff146101295780638cd1332a1461013c575b600080fd5b6100cc6100c7366004610488565b6101c1565b60405190151581526020015b60405180910390f35b6100f46100ef366004610488565b6101d7565b604051905181526020016100d8565b6100cc610111366004610488565b6101f0565b6100f4610124366004610488565b6101ff565b6100f4610137366004610488565b610218565b6100cc61014a366004610488565b610231565b6100cc61015d366004610488565b61023f565b6100cc610170366004610488565b61024d565b6100f4610183366004610488565b61025a565b6100f46101963660046104bd565b610273565b6100f46101a9366004610488565b610291565b6100f46101bc366004610488565b6102aa565b60006101d08383519051121590565b9392505050565b6040805160208101909152600081526101d083836102c3565b60006101d08383519051131590565b6040805160208101909152600081526101d083836102f6565b6040805160208101909152600081526101d08383610337565b60006101d083835190511390565b60006101d083835190511290565b80518251600091146101d0565b6040805160208101909152600081526101d0838361036e565b60408051602081019091526000815261028b82610398565b92915050565b6040805160208101909152600081526101d083836103d1565b6040805160208101909152600081526101d083836103f6565b60408051602081019091526000815260408051602081019091528251845182916102ed9190610414565b90529392505050565b60408051602081019091526000815260408051602081019091528251845182919061032d906b033b2e3c9fd0803ce8000000610420565b6102ed91906104ec565b60408051602081019091526000815260408051602081019091528251845182916b033b2e3c9fd0803ce80000009161032d91610420565b60408051602081019091526000815260408051602081019091528251845182916102ed919061042c565b6040805160208101909152600081526040805160208101909152806103c9846b033b2e3c9fd0803ce8000000610420565b905292915050565b60408051602081019091526000815281518351136103ef57816101d0565b5090919050565b60408051602081019091526000815281518351126103ef57816101d0565b60006101d08284610528565b60006101d08284610569565b60006101d082846105ee565b60006020828403121561044a57600080fd5b6040516020810181811067ffffffffffffffff8211171561047b57634e487b7160e01b600052604160045260246000fd5b6040529135825250919050565b6000806040838503121561049b57600080fd5b6104a58484610438565b91506104b48460208501610438565b90509250929050565b6000602082840312156104cf57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b60008261050957634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610523576105236104d6565b500590565b600080821280156001600160ff1b038490038513161561054a5761054a6104d6565b600160ff1b8390038412811615610563576105636104d6565b50500190565b60006001600160ff1b038184138284138082168684048611161561058f5761058f6104d6565b600160ff1b60008712828116878305891216156105ae576105ae6104d6565b600087129250878205871284841616156105ca576105ca6104d6565b878505871281841616156105e0576105e06104d6565b505050929093029392505050565b60008083128015600160ff1b85018412161561060c5761060c6104d6565b6001600160ff1b0384018313811615610627576106276104d6565b5050039056fea2646970667358221220ca78236f6e18e05b57aedfc7da0b89748c94860df5147e8f5d039504cf1b6a9164736f6c63430008090033";

type FixedPointInt256TesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FixedPointInt256TesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FixedPointInt256Tester__factory extends ContractFactory {
  constructor(...args: FixedPointInt256TesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FixedPointInt256Tester> {
    return super.deploy(overrides || {}) as Promise<FixedPointInt256Tester>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FixedPointInt256Tester {
    return super.attach(address) as FixedPointInt256Tester;
  }
  connect(signer: Signer): FixedPointInt256Tester__factory {
    return super.connect(signer) as FixedPointInt256Tester__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FixedPointInt256TesterInterface {
    return new utils.Interface(_abi) as FixedPointInt256TesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FixedPointInt256Tester {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FixedPointInt256Tester;
  }
}
