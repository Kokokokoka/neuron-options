/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockWhitelistModule,
  MockWhitelistModuleInterface,
} from "../MockWhitelistModule";

const _abi = [
  {
    inputs: [],
    name: "addressBook",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_callee",
        type: "address",
      },
    ],
    name: "blacklistCallee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_collaterals",
        type: "address[]",
      },
    ],
    name: "blacklistCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_otokenAddress",
        type: "address",
      },
    ],
    name: "blacklistOtoken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_underlying",
        type: "address",
      },
      {
        internalType: "address",
        name: "_strike",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_collaterals",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "_isPut",
        type: "bool",
      },
    ],
    name: "blacklistProduct",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_callee",
        type: "address",
      },
    ],
    name: "isWhitelistedCallee",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_collaterals",
        type: "address[]",
      },
    ],
    name: "isWhitelistedCollaterals",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_otoken",
        type: "address",
      },
    ],
    name: "isWhitelistedOtoken",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_underlying",
        type: "address",
      },
      {
        internalType: "address",
        name: "_strike",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_collateral",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "_isPut",
        type: "bool",
      },
    ],
    name: "isWhitelistedProduct",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_callee",
        type: "address",
      },
    ],
    name: "whitelistCallee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_collaterals",
        type: "address[]",
      },
    ],
    name: "whitelistCollaterals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_otoken",
        type: "address",
      },
    ],
    name: "whitelistOtoken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_underlying",
        type: "address",
      },
      {
        internalType: "address",
        name: "_strike",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_collaterals",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "_isPut",
        type: "bool",
      },
    ],
    name: "whitelistProduct",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whitelistedOtoken",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061086d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a2ae545a1161008c578063bd365d5c11610066578063bd365d5c14610241578063ebd31e8e14610254578063ec7127b614610283578063f5887cdd146102b557600080fd5b8063a2ae545a146101ef578063b8760fb61461021b578063bb7a7df81461022e57600080fd5b8063708a0393116100c8578063708a03931461015857806379df1e441461018a578063a03eb6ef146101b9578063a219bc16146101cc57600080fd5b806311946b98146100ef578063469f1c4f14610130578063668414f714610145575b600080fd5b61011b6100fd36600461053d565b6001600160a01b031660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b61014361013e3660046105ab565b6102e0565b005b610143610153366004610629565b6103d3565b61014361016636600461053d565b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b61014361019836600461053d565b6001600160a01b03166000908152602081905260409020805460ff19169055565b61011b6101c7366004610681565b610424565b61011b6101da36600461053d565b60006020819052908152604090205460ff1681565b61011b6101fd36600461053d565b6001600160a01b031660009081526003602052604090205460ff1690565b61011b6102293660046105ab565b61046a565b61014361023c3660046105ab565b6104b9565b61014361024f366004610629565b610508565b61014361026236600461053d565b6001600160a01b03166000908152600360205260409020805460ff19169055565b61014361029136600461053d565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6004546102c8906001600160a01b031681565b6040516001600160a01b039091168152602001610127565b6002600084846040516020016102f792919061078d565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff166103815760405162461bcd60e51b815260206004820152602860248201527f57686974656c6973743a20436f6c6c61746572616c206973206e6f74207768696044820152671d195b1a5cdd195960c21b606482015260840160405180910390fd5b6000858585858560405160200161039c9594939291906107a9565b60408051601f198184030181529181528151602092830120600090815260019283905220805460ff19169091179055505050505050565b60006002600084846040516020016103ec92919061078d565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff19169115159190911790555050565b6000600260008360405160200161043b91906107ea565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff1692915050565b60008086868686866040516020016104869594939291906107a9565b60408051808303601f1901815291815281516020928301206000908152600190925290205460ff16979650505050505050565b600085858585856040516020016104d49594939291906107a9565b60408051601f198184030181529181528151602092830120600090815260019092529020805460ff19169055505050505050565b60016002600084846040516020016103ec92919061078d565b80356001600160a01b038116811461053857600080fd5b919050565b60006020828403121561054f57600080fd5b61055882610521565b9392505050565b60008083601f84011261057157600080fd5b50813567ffffffffffffffff81111561058957600080fd5b6020830191508360208260051b85010111156105a457600080fd5b9250929050565b6000806000806000608086880312156105c357600080fd5b6105cc86610521565b94506105da60208701610521565b9350604086013567ffffffffffffffff8111156105f657600080fd5b6106028882890161055f565b9094509250506060860135801515811461061b57600080fd5b809150509295509295909350565b6000806020838503121561063c57600080fd5b823567ffffffffffffffff81111561065357600080fd5b61065f8582860161055f565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561069457600080fd5b823567ffffffffffffffff808211156106ac57600080fd5b818501915085601f8301126106c057600080fd5b8135818111156106d2576106d261066b565b8060051b604051601f19603f830116810181811085821117156106f7576106f761066b565b60405291825284820192508381018501918883111561071557600080fd5b938501935b8285101561073a5761072b85610521565b8452938501939285019261071a565b98975050505050505050565b8183526000602080850194508260005b85811015610782576001600160a01b0361076f83610521565b1687529582019590820190600101610756565b509495945050505050565b6020815260006107a1602083018486610746565b949350505050565b6001600160a01b038681168252851660208201526080604082018190526000906107d69083018587610746565b905082151560608301529695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561082b5783516001600160a01b031683529284019291840191600101610806565b5090969550505050505056fea2646970667358221220a7fb5f60b7dfc1df7fd1040b6c2b5f0ccec0f5d9532534f6ff0e6c5e54ac70aa64736f6c63430008090033";

type MockWhitelistModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockWhitelistModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockWhitelistModule__factory extends ContractFactory {
  constructor(...args: MockWhitelistModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockWhitelistModule> {
    return super.deploy(overrides || {}) as Promise<MockWhitelistModule>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockWhitelistModule {
    return super.attach(address) as MockWhitelistModule;
  }
  connect(signer: Signer): MockWhitelistModule__factory {
    return super.connect(signer) as MockWhitelistModule__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockWhitelistModuleInterface {
    return new utils.Interface(_abi) as MockWhitelistModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockWhitelistModule {
    return new Contract(address, _abi, signerOrProvider) as MockWhitelistModule;
  }
}
