/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockWhitelistModule,
  MockWhitelistModuleInterface,
} from "../MockWhitelistModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "_isWhitelistedOtoken",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_callee",
        type: "address",
      },
    ],
    name: "blacklistCallee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_callee",
        type: "address",
      },
    ],
    name: "isWhitelistedCallee",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_collateral",
        type: "address",
      },
    ],
    name: "isWhitelistedCollateral",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_otoken",
        type: "address",
      },
    ],
    name: "isWhitelistedOtoken",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_underlying",
        type: "address",
      },
      {
        internalType: "address",
        name: "_strike",
        type: "address",
      },
      {
        internalType: "address",
        name: "_collateral",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_isPut",
        type: "bool",
      },
    ],
    name: "isWhitelistedProduct",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_callee",
        type: "address",
      },
    ],
    name: "whitelistCallee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_collateral",
        type: "address",
      },
    ],
    name: "whitelistCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_otoken",
        type: "address",
      },
    ],
    name: "whitelistOtoken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_underlying",
        type: "address",
      },
      {
        internalType: "address",
        name: "_strike",
        type: "address",
      },
      {
        internalType: "address",
        name: "_collateral",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_isPut",
        type: "bool",
      },
    ],
    name: "whitelistProduct",
    outputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061048c806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a2ae545a11610066578063a2ae545a1461016f578063a34626c41461019b578063ebd31e8e146101ae578063ec7127b6146101dd578063f9839d891461020f57600080fd5b806311946b98146100a357806327219c75146100e4578063401a83cf14610107578063708a03931461011a57806382d90ebf1461014e575b600080fd5b6100cf6100b136600461039b565b6001600160a01b031660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100cf6100f236600461039b565b60006020819052908152604090205460ff1681565b6100cf6101153660046103bd565b61023b565b61014c61012836600461039b565b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b005b61016161015c3660046103bd565b610287565b6040519081526020016100db565b6100cf61017d36600461039b565b6001600160a01b031660009081526003602052604090205460ff1690565b61014c6101a936600461039b565b6102dc565b61014c6101bc36600461039b565b6001600160a01b03166000908152600360205260409020805460ff19169055565b61014c6101eb36600461039b565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6100cf61021d36600461039b565b6001600160a01b031660009081526002602052604090205460ff1690565b600080858585856040516020016102559493929190610418565b60408051808303601f1901815291815281516020928301206000908152600190925290205460ff169695505050505050565b6000848484846040516020016102a09493929190610418565b60408051601f198184030181529181528151602092830120600081815260019384905291909120805460ff191690921790915595945050505050565b6001600160a01b03811660009081526002602052604090205460ff161561035b5760405162461bcd60e51b815260206004820152602960248201527f57686974656c6973743a20436f6c6c61746572616c20616c72656164792077686044820152681a5d195b1a5cdd195960ba1b606482015260840160405180910390fd5b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b80356001600160a01b038116811461039657600080fd5b919050565b6000602082840312156103ad57600080fd5b6103b68261037f565b9392505050565b600080600080608085870312156103d357600080fd5b6103dc8561037f565b93506103ea6020860161037f565b92506103f86040860161037f565b91506060850135801515811461040d57600080fd5b939692955090935050565b6bffffffffffffffffffffffff19606095861b8116825293851b841660148201529190931b909116602882015290151560f81b603c820152603d019056fea26469706673582212201033bdcc1f0961409f7b81647e4e71dc44a7010f32a6f9f464e5a9f9b16eb7a564736f6c63430008090033";

type MockWhitelistModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockWhitelistModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockWhitelistModule__factory extends ContractFactory {
  constructor(...args: MockWhitelistModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockWhitelistModule> {
    return super.deploy(overrides || {}) as Promise<MockWhitelistModule>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockWhitelistModule {
    return super.attach(address) as MockWhitelistModule;
  }
  connect(signer: Signer): MockWhitelistModule__factory {
    return super.connect(signer) as MockWhitelistModule__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockWhitelistModuleInterface {
    return new utils.Interface(_abi) as MockWhitelistModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockWhitelistModule {
    return new Contract(address, _abi, signerOrProvider) as MockWhitelistModule;
  }
}
