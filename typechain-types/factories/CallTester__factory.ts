/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CallTester, CallTesterInterface } from "../CallTester";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "CallFunction",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "callFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610203806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639c23da5014610030575b600080fd5b61004361003e366004610098565b610045565b005b7f2962d159e052b651f6545f9c39c59745028f27b4d13aec5b33ae5da28676a27a8282604051610076929190610168565b60405180910390a15050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156100ab57600080fd5b82356001600160a01b03811681146100c257600080fd5b9150602083013567ffffffffffffffff808211156100df57600080fd5b818501915085601f8301126100f357600080fd5b81358181111561010557610105610082565b604051601f8201601f19908116603f0116810190838211818310171561012d5761012d610082565b8160405282815288602084870101111561014657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60018060a01b038316815260006020604081840152835180604085015260005b818110156101a457858101830151858201606001528201610188565b818111156101b6576000606083870101525b50601f01601f19169290920160600194935050505056fea264697066735822122003332b4aa5715be5478fb031825cd6294d7d3ac9920677909d9ae1798012971964736f6c63430008090033";

type CallTesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CallTesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CallTester__factory extends ContractFactory {
  constructor(...args: CallTesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CallTester> {
    return super.deploy(overrides || {}) as Promise<CallTester>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CallTester {
    return super.attach(address) as CallTester;
  }
  connect(signer: Signer): CallTester__factory {
    return super.connect(signer) as CallTester__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CallTesterInterface {
    return new utils.Interface(_abi) as CallTesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CallTester {
    return new Contract(address, _abi, signerOrProvider) as CallTester;
  }
}
